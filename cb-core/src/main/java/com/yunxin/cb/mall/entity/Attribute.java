/**
 *
 */
package com.yunxin.cb.mall.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Set;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * TblBaseSystemUser generated by hbm2java
 */
@Cacheable(true)
@Entity
@Table
@DynamicInsert
@DynamicUpdate
@NamedEntityGraph(name = "Attribute.attributeGroup", attributeNodes = @NamedAttributeNode("attributeGroup"))
public class Attribute implements java.io.Serializable, Comparable {

    /**
     *
     */
    private static final long serialVersionUID = 1493805487205809206L;

    /**
     * 属性ID
     */

    private int attributeId;

    /**
     * 属性组
     */

    private AttributeGroup attributeGroup;

    /**
     * 属性名
     */

    private String attributeName;

    /**
     * 属性图片路径
     */

    private String imagePath;


    private Set<ProductAttribute> productAttributes = new HashSet<>();


    /**
     * 排序
     */
    private short sortOrder;

    public Attribute() {

    }

    public Attribute(int attributeId) {
        this.attributeId = attributeId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "GROUP_ID", nullable = false)
    @JsonIgnore
    public AttributeGroup getAttributeGroup() {
        return attributeGroup;
    }

    public void setAttributeGroup(AttributeGroup attributeGroup) {
        this.attributeGroup = attributeGroup;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(unique = true, nullable = false, precision = 12, scale = 0)
    public int getAttributeId() {
        return attributeId;
    }

    public void setAttributeId(int propId) {
        this.attributeId = propId;
    }

    @Column(nullable = false, length = 32)
    public String getAttributeName() {
        return attributeName;
    }

    public void setAttributeName(String propName) {
        this.attributeName = propName;
    }


    @OneToMany(cascade = CascadeType.REMOVE, fetch = FetchType.LAZY, mappedBy = "attribute")
    public Set<ProductAttribute> getProductAttributes() {
        return productAttributes;
    }

    public void setProductAttributes(Set<ProductAttribute> productAttributes) {
        this.productAttributes = productAttributes;
    }

    @Column(nullable = true, length = 255)
    public String getImagePath() {
        return imagePath;
    }

    public void setImagePath(String imagePath) {
        this.imagePath = imagePath;
    }

    @Column(nullable = true, length = 255)


    public short getSortOrder() {
        return sortOrder;
    }

    public void setSortOrder(short sortOrder) {
        this.sortOrder = sortOrder;
    }

    @Override
    public int compareTo(Object o) {
        Attribute o1 = (Attribute) o;
        if (o1.getSortOrder() > sortOrder) {
            return 1;
        } else if (o1.getSortOrder() == sortOrder) {
            return 0;
        } else {
            return -1;
        }

    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Attribute attribute = (Attribute) o;

        return attributeId == attribute.attributeId;

    }

    @Override
    public int hashCode() {
        return attributeId;
    }
}
