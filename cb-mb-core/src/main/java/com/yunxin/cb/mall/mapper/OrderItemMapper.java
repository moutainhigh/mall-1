package com.yunxin.cb.mall.mapper;

import com.yunxin.cb.mall.entity.OrderItem;
import com.yunxin.cb.mall.entity.Product;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;

import java.util.List;
import java.util.Set;

@Mapper
public interface OrderItemMapper {
    String columns = "ITEM_ID, BUYER_MESSAGE, CREATE_TIME, EVALUATE, ORDER_ITEM_PRICE, PRODUCT_IMG, PRODUCT_NUM, SALE_PRICE, ACTIVITY_ID, ORDER_ID, PRODUCT_ID";
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order_item
     *
     * @mbg.generated Wed Jul 18 10:37:44 CST 2018
     */
    @Delete({
        "delete from order_item",
        "where ITEM_ID = #{itemId,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer itemId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order_item
     *
     * @mbg.generated Wed Jul 18 10:37:44 CST 2018
     */
    @Insert({
        "insert into order_item (ITEM_ID, BUYER_MESSAGE, ",
        "CREATE_TIME, EVALUATE, ",
        "ORDER_ITEM_PRICE, PRODUCT_IMG, ",
        "PRODUCT_NUM, SALE_PRICE, ",
        "ACTIVITY_ID, ORDER_ID, ",
        "PRODUCT_ID)",
        "values (#{itemId,jdbcType=INTEGER}, #{buyerMessage,jdbcType=VARCHAR}, ",
        "#{createTime,jdbcType=TIMESTAMP}, #{evaluate,jdbcType=BIT}, ",
        "#{orderItemPrice,jdbcType=REAL}, #{productImg,jdbcType=VARCHAR}, ",
        "#{productNum,jdbcType=INTEGER}, #{salePrice,jdbcType=REAL}, ",
        "#{activityId,jdbcType=INTEGER}, #{orderId,jdbcType=INTEGER}, ",
        "#{productId,jdbcType=INTEGER})"
    })
    @Options(useGeneratedKeys=true, keyProperty="itemId", keyColumn="ITEM_ID")
    int insert(OrderItem record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order_item
     *
     * @mbg.generated Wed Jul 18 10:37:44 CST 2018
     */
    @Select({
            "select", columns,
            "from order_item",
            "where ITEM_ID = #{itemId,jdbcType=INTEGER}"
    })
    @Results(id = "orderItemMap", value = {
            @Result(column="ITEM_ID", property="itemId", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="BUYER_MESSAGE", property="buyerMessage", jdbcType=JdbcType.VARCHAR),
            @Result(column="CREATE_TIME", property="createTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="EVALUATE", property="evaluate", jdbcType=JdbcType.BIT),
            @Result(column="ORDER_ITEM_PRICE", property="orderItemPrice", jdbcType=JdbcType.REAL),
            @Result(column="PRODUCT_IMG", property="productImg", jdbcType=JdbcType.VARCHAR),
            @Result(column="PRODUCT_NUM", property="productNum", jdbcType=JdbcType.INTEGER),
            @Result(column="SALE_PRICE", property="salePrice", jdbcType=JdbcType.REAL),
            @Result(column="ACTIVITY_ID", property="activityId", jdbcType=JdbcType.INTEGER),
            @Result(column="ORDER_ID", property="orderId", jdbcType=JdbcType.INTEGER),
            @Result(column="PRODUCT_ID", property="productId", jdbcType=JdbcType.INTEGER)
    })
    OrderItem selectByPrimaryKey(Integer itemId);

    @Select({
            "select", columns,
            "from order_item",
            "where ITEM_ID = #{itemId,jdbcType=INTEGER}"
    })
    @Results(id = "orderItemRelationMap", value = {
            @Result(column="ITEM_ID", property="itemId", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="BUYER_MESSAGE", property="buyerMessage", jdbcType=JdbcType.VARCHAR),
            @Result(column="CREATE_TIME", property="createTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="EVALUATE", property="evaluate", jdbcType=JdbcType.BIT),
            @Result(column="ORDER_ITEM_PRICE", property="orderItemPrice", jdbcType=JdbcType.REAL),
            @Result(column="PRODUCT_IMG", property="productImg", jdbcType=JdbcType.VARCHAR),
            @Result(column="PRODUCT_NUM", property="productNum", jdbcType=JdbcType.INTEGER),
            @Result(column="SALE_PRICE", property="salePrice", jdbcType=JdbcType.REAL),
            @Result(column="ACTIVITY_ID", property="activityId", jdbcType=JdbcType.INTEGER),
            @Result(column="ORDER_ID", property="orderId", jdbcType=JdbcType.INTEGER),
            @Result(column="PRODUCT_ID", property="productId", jdbcType=JdbcType.INTEGER),
            @Result(column="PRODUCT_ID", property="product", javaType=Product.class,
                one=@One(select="com.yunxin.cb.mall.mapper.ProductMapper.selectRelationById"))
    })
    OrderItem selectRelationById(Integer itemId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order_item
     *
     * @mbg.generated Wed Jul 18 10:37:44 CST 2018
     */
    @Select({
        "select",
            columns,
        "from order_item"
    })
    @ResultMap(value="orderItemMap")
    List<OrderItem> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order_item
     *
     * @mbg.generated Wed Jul 18 10:37:44 CST 2018
     */
    @Update({
        "update order_item",
        "set BUYER_MESSAGE = #{buyerMessage,jdbcType=VARCHAR},",
          "CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},",
          "EVALUATE = #{evaluate,jdbcType=BIT},",
          "ORDER_ITEM_PRICE = #{orderItemPrice,jdbcType=REAL},",
          "PRODUCT_IMG = #{productImg,jdbcType=VARCHAR},",
          "PRODUCT_NUM = #{productNum,jdbcType=INTEGER},",
          "SALE_PRICE = #{salePrice,jdbcType=REAL},",
          "ACTIVITY_ID = #{activityId,jdbcType=INTEGER},",
          "ORDER_ID = #{orderId,jdbcType=INTEGER},",
          "PRODUCT_ID = #{productId,jdbcType=INTEGER}",
        "where ITEM_ID = #{itemId,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(OrderItem record);

    @Select({
            "select", columns,
            "from order_item",
            "where ORDER_ID = #{orderId,jdbcType=INTEGER}"
    })
    @ResultMap(value="orderItemRelationMap")
    Set<OrderItem> selectByOrderId(Integer orderId);

    /**
     * 根据orderId和productId查询
     * @param orderId
     * @param productId
     * @return
     */
    @Select({
            "select", columns,
            "from order_item",
            "where ORDER_ID = #{orderId,jdbcType=INTEGER} and PRODUCT_ID = #{productId,jdbcType=INTEGER}"
    })
    @Results({
            @Result(column="ITEM_ID", property="itemId", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="BUYER_MESSAGE", property="buyerMessage", jdbcType=JdbcType.VARCHAR),
            @Result(column="CREATE_TIME", property="createTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="EVALUATE", property="evaluate", jdbcType=JdbcType.BIT),
            @Result(column="ORDER_ITEM_PRICE", property="orderItemPrice", jdbcType=JdbcType.REAL),
            @Result(column="PRODUCT_IMG", property="productImg", jdbcType=JdbcType.VARCHAR),
            @Result(column="PRODUCT_NUM", property="productNum", jdbcType=JdbcType.INTEGER),
            @Result(column="SALE_PRICE", property="salePrice", jdbcType=JdbcType.REAL),
            @Result(column="ACTIVITY_ID", property="activityId", jdbcType=JdbcType.INTEGER),
            @Result(column="ORDER_ID", property="orderId", jdbcType=JdbcType.INTEGER),
            @Result(column="PRODUCT_ID", property="productId", jdbcType=JdbcType.INTEGER)
    })
    OrderItem selectByOrderIdAndProductId(@Param("orderId") int orderId, @Param("productId")int productId);
}