package com.yunxin.cb.mall.mapper;

import com.yunxin.cb.mall.entity.Payment;
import com.yunxin.cb.mall.entity.meta.PayState;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;

import java.util.List;
@Mapper
public interface PaymentMapper {

    final static String columns = "PAY_ID, BUYER_ACCOUNT, CHANNEL_TYPE, COMPLETE_TIME, CREATE_TIME, ERROR_CODE, " +
                "ERROR_MSG, NOTIFY_TIME, OPERATOR_ID, PAY_AMOUNT, PAY_FLOW_CODE, PAY_NOTIFY_STATE, "+
                "PAY_STATE, PAY_TYPE, REMARK, CUSTOMER_ID, ORDER_ID, BATCH_NO, BATCH_NUM, RETURN_CODE";
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table payment
     *
     * @mbg.generated Thu Jul 26 16:53:26 CST 2018
     */
    @Delete({
        "delete from payment",
        "where PAY_ID = #{payId,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer payId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table payment
     *
     * @mbg.generated Thu Jul 26 16:53:26 CST 2018
     */
    @Insert({
        "insert into payment ( ",
            columns,")",
        "values (#{payId,jdbcType=INTEGER}, #{buyerAccount,jdbcType=VARCHAR}, ",
        "#{channelType,jdbcType=INTEGER}, #{completeTime,jdbcType=TIMESTAMP}, ",
        "#{createTime,jdbcType=TIMESTAMP}, #{errorCode,jdbcType=VARCHAR}, ",
        "#{errorMsg,jdbcType=VARCHAR}, #{notifyTime,jdbcType=TIMESTAMP}, ",
        "#{operatorId,jdbcType=INTEGER}, #{payAmount,jdbcType=DOUBLE}, ",
        "#{payFlowCode,jdbcType=VARCHAR}, #{payNotifyState,jdbcType=INTEGER}, ",
        "#{payState,jdbcType=INTEGER}, #{payType,jdbcType=INTEGER}, ",
        "#{remark,jdbcType=VARCHAR}, #{customerId,jdbcType=INTEGER}, ",
        "#{orderId,jdbcType=INTEGER}, #{batchNo,jdbcType=VARCHAR}, ",
        "#{batchNum,jdbcType=INTEGER}, #{returnCode,jdbcType=VARCHAR})"
    })
    int insert(Payment record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table payment
     *
     * @mbg.generated Thu Jul 26 16:53:26 CST 2018
     */
    @Select({
        "select",
            columns,
        "from payment",
        "where PAY_ID = #{payId,jdbcType=INTEGER}"
    })
    @Results(id = "paymentMap", value = {
        @Result(column="PAY_ID", property="payId", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="BUYER_ACCOUNT", property="buyerAccount", jdbcType=JdbcType.VARCHAR),
        @Result(column="CHANNEL_TYPE", property="channelType", jdbcType=JdbcType.INTEGER),
        @Result(column="COMPLETE_TIME", property="completeTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="CREATE_TIME", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="ERROR_CODE", property="errorCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="ERROR_MSG", property="errorMsg", jdbcType=JdbcType.VARCHAR),
        @Result(column="NOTIFY_TIME", property="notifyTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="OPERATOR_ID", property="operatorId", jdbcType=JdbcType.INTEGER),
        @Result(column="PAY_AMOUNT", property="payAmount", jdbcType=JdbcType.DOUBLE),
        @Result(column="PAY_FLOW_CODE", property="payFlowCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="PAY_NOTIFY_STATE", property="payNotifyState", jdbcType=JdbcType.INTEGER),
        @Result(column="PAY_STATE", property="payState", jdbcType=JdbcType.INTEGER),
        @Result(column="PAY_TYPE", property="payType", jdbcType=JdbcType.INTEGER),
        @Result(column="REMARK", property="remark", jdbcType=JdbcType.VARCHAR),
        @Result(column="CUSTOMER_ID", property="customerId", jdbcType=JdbcType.INTEGER),
        @Result(column="ORDER_ID", property="orderId", jdbcType=JdbcType.INTEGER),
        @Result(column="BATCH_NO", property="batchNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="BATCH_NUM", property="batchNum", jdbcType=JdbcType.INTEGER),
        @Result(column="RETURN_CODE", property="returnCode", jdbcType=JdbcType.VARCHAR)
    })
    Payment selectByPrimaryKey(Integer payId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table payment
     *
     * @mbg.generated Thu Jul 26 16:53:26 CST 2018
     */
    @Select({
        "select",
            columns,
        "from payment"
    })
    @ResultMap(value="paymentMap")
    List<Payment> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table payment
     *
     * @mbg.generated Thu Jul 26 16:53:26 CST 2018
     */
    @Update({
        "update payment",
        "set BUYER_ACCOUNT = #{buyerAccount,jdbcType=VARCHAR},",
          "CHANNEL_TYPE = #{channelType,jdbcType=INTEGER},",
          "COMPLETE_TIME = #{completeTime,jdbcType=TIMESTAMP},",
          "CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},",
          "ERROR_CODE = #{errorCode,jdbcType=VARCHAR},",
          "ERROR_MSG = #{errorMsg,jdbcType=VARCHAR},",
          "NOTIFY_TIME = #{notifyTime,jdbcType=TIMESTAMP},",
          "OPERATOR_ID = #{operatorId,jdbcType=INTEGER},",
          "PAY_AMOUNT = #{payAmount,jdbcType=DOUBLE},",
          "PAY_FLOW_CODE = #{payFlowCode,jdbcType=VARCHAR},",
          "PAY_NOTIFY_STATE = #{payNotifyState,jdbcType=INTEGER},",
          "PAY_STATE = #{payState,jdbcType=INTEGER},",
          "PAY_TYPE = #{payType,jdbcType=INTEGER},",
          "REMARK = #{remark,jdbcType=VARCHAR},",
          "CUSTOMER_ID = #{customerId,jdbcType=INTEGER},",
          "ORDER_ID = #{orderId,jdbcType=INTEGER},",
          "BATCH_NO = #{batchNo,jdbcType=VARCHAR},",
          "BATCH_NUM = #{batchNum,jdbcType=INTEGER},",
          "RETURN_CODE = #{returnCode,jdbcType=VARCHAR}",
        "where PAY_ID = #{payId,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(Payment record);

    /**
     * 根据订单id和支付状态查询支付记录
     * @return
     */
    @Select({
            "select",
            columns,
            "from payment",
            "where ORDER_ID = #{orderId,jdbcType=INTEGER}",
            "and PAY_STATE = #{payState,jdbcType=INTEGER}"
    })
    @ResultMap(value="paymentMap")
    Payment selectByOrderIdAndPayState(@Param("orderId")int orderId,@Param("payState")PayState payState);

    /**
     * 根据订单id查询支付记录
     * @return
     */
    @Select({
            "select",
            columns,
            "from payment",
            "where ORDER_ID = #{orderId,jdbcType=INTEGER}",
    })
    @ResultMap(value="paymentMap")
    Payment selectByOrderId(@Param("orderId")int orderId);

    /**
     * 根据批次号和支付状态查询支付记录
     * @return
     */
    @Select({
            "select",
            columns,
            "from payment",
            "where BATCH_NO = #{batchNo}",
            "and PAY_STATE = #{payState}"
    })
    @ResultMap(value="paymentMap")
    List<Payment> selectByBatchNoAndPayState(@Param("batchNo")String batchNo, @Param("payState")PayState payState);
}